--uploading---
digits = read.csv("optdigits.csv", header=FALSE)

--dividing into sets----
n=dim(digits)[1]
set.seed(12345) 
id=sample(1:n, floor(n*0.5)) 
train=digits[id,] 

id1=setdiff(1:n, id)
set.seed(12345) 
id2=sample(id1, floor(n*0.25)) 
valid=digits[id2,]

id3=setdiff(id1,id2)
test=digits[id3,]

--instal library kknn--
install.packages("kknn")

--calculate the model using k-nearest---
model = kknn(V65~., train, valid, na.action = na.omit(),k = 30, kernel = "rectangular", scale=TRUE)
modelTrain = kknn(V65~., train, train, na.action = na.omit(),k = 30, kernel = "rectangular", scale=TRUE)
modelTest = kknn(V65~., train, test, na.action = na.omit(),k = 30, kernel = "rectangular", scale=TRUE)
  
 -- build confusion matrices for the training and test data---
CMTrain=table(ytrainpred = modelTrain$fitted.values,ytraintrue = train$V65)
CMTest=table(ytrainpred = modelTest$fitted.values,ytraintrue = test$V65)
 
 -- calculate misclassification rate for the training and test data ----
MCETrain=mean(modelTrain$fitted.values != train$V65) 
MCETest=mean(modelTest$fitted.values != test$V65)

rowsWith8FromTrain = which(train$V65 == "8") 

vector8ProbTrain = modelTrain$prob[9]

install.packages("dplyr")
 